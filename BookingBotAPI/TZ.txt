Техническое задание (ТЗ)

1. Общая информация

Название проекта: Бот для регистрации клиентов на услугиТехнологический стек: C# (.NET) + PostgreSQLПлатформы: Telegram, WhatsApp, ВКонтактеРоли пользователей:

Мастер (поставщик услуг)

Клиент (потребитель услуг)

2. Функциональные требования

2.1 Роль "Мастер"

Регистрация

При первом подключении мастер проходит регистрацию в боте.

Указывает места предоставления услуг.

Для каждого места указывает период работы (рабочие дни, часы работы).

Указывает предоставляемые услуги.

Указывает длительность каждой услуги.

Управление данными

После регистрации мастер может изменять:

Места работы.

Перечень предоставляемых услуг и их параметры (название, длительность и т. д.).

Запись клиентов

Бот должен предоставлять мастеру ссылки для записи клиентов в:

WhatsApp

Telegram

ВКонтакте

Просмотр записей на неделю вперед.

Возможность отмены и редактирования записей.

Взаимодействие с клиентами

Мастер может отвечать на сообщения клиентов через бот.

Если клиент пишет из WhatsApp, ответ мастера через бот отправляется обратно в WhatsApp.

Возможность отправки массовых уведомлений клиентам.

Автоматические напоминания клиентам о предстоящих записях.

2.2 Роль "Клиент"

Взаимодействие с мастером

Клиент переходит по ссылке от мастера и попадает в чат с конкретным мастером.

Клиент не видит других мастеров.

Если у клиента есть ссылки от нескольких мастеров, он может выбрать активного мастера.

Запись на услугу

Клиент выбирает услугу.

Отображаются доступные дни для записи.

После выбора дня отображаются доступные интервалы времени (кнопки выбора).

Свободное время рассчитывается на основе существующих записей и длительности услуги.

Возможность отмены и изменения записи.

Автоматические напоминания о записи.

Чат и управление записями

Клиент может отправить сообщение мастеру (через отдельную кнопку в боте).

Клиент может в любой момент переключиться на другого мастера.

Клиент может:

Просмотреть историю переписки с мастером.

Просмотреть свои активные записи на услуги.

Получать уведомления о предстоящих записях.

Оставлять отзывы о посещенных услугах.

Использовать несколько мессенджеров для связи (Telegram, WhatsApp, ВКонтакте) — бот должен учитывать все привязанные аккаунты клиента.

3. Нефункциональные требования

Бот должен быть доступен 24/7.

База данных должна быть отказоустойчивой (репликация, бэкапы).

Ответы бота должны быть быстрыми (< 1 секунда на запрос).

Возможность масштабирования (поддержка увеличения нагрузки).

Логирование всех действий пользователей.

Поддержка нескольких языков интерфейса.

4. Архитектура (предложение)

Backend: ASP.NET Core + Entity Framework Core

База данных: PostgreSQL

API: REST API для связи между ботами Telegram, WhatsApp, ВКонтакте и сервером.

Обмен сообщениями: Webhooks для обработки сообщений от клиентов и мастеров.

Аутентификация: JWT-токены для защиты API.

Очереди задач: Использование RabbitMQ для обработки фоновых задач.

Кеширование: Redis для быстрого доступа к данным.

Дополнительно можно добавить админ-панель для управления ботом и логами.

